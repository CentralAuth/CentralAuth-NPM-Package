// This file is auto-generated by @hey-api/openapi-ts

export type InvitedUser = {
    readonly id?: string;
    tenantId: string;
    email: string;
    roleId: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
    readonly activated: boolean;
    readonly created?: string;
    readonly updated?: string;
    role: {
        id?: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
        name: string;
    };
};

export type InternalUser = {
    readonly id?: string;
    readonly tenantId?: string;
    readonly userId?: string;
    roleId: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
};

export type OrganizationSettings = {
    readonly id?: string;
    maxSessionTime?: number;
    maxInactivityTime?: number;
    allowLocalhost?: boolean;
    checkReferrer?: boolean;
    hijackProtection?: boolean;
    hijackProtectionIp?: boolean;
    hijackProtectionUserAgent?: boolean;
    hijackProtectionDeviceId?: boolean;
    autoLogin?: boolean;
    defaultLoginMethod?: 'local' | 'remote' | 'userPick';
    defaultLoginAttemptType?: 'link' | 'challenge' | 'code';
    useGlobalSmtp?: boolean;
    smtpHost?: string | null;
    smtpPort?: number | null;
    smtpFrom?: string | null;
    smtpUser?: string | null;
    smtpPass?: string | null;
};

export type WhitelistItem = {
    readonly id?: string;
    readonly organizationId?: string;
    value: string;
};

export type NativeAppRegistration = {
    readonly id?: string;
    /**
     * Bundle ID or package name for the native app.
     */
    bundleId: string;
    /**
     * App link or universal link to open the app after authentication.
     */
    appLink: string;
    readonly organizationId: string;
};

export type OAuthProvider = {
    readonly id?: string;
    readonly organizationId?: string;
    type: 'google' | 'apple' | 'microsoft' | 'github';
    useOwnCredentials?: boolean;
    clientId: string | null;
    clientSecret: string | null;
};

export type ThemeSettings = {
    readonly id?: string;
    /**
     * ID of the organization these theme settings belong to
     */
    readonly organizationId?: string;
    /**
     * Layout of the login block on the login page
     */
    loginBlockLayout?: 'default' | 'compact';
    /**
     * Layout of the login page
     */
    loginPageLayout?: 'default' | 'alignLeft' | 'alignRight' | 'fullLeft' | 'fullRight' | 'compact';
    /**
     * URL of the image to use on the login page
     */
    imageUrl?: string | null;
    /**
     * Google Font name to use on the login page
     */
    customFont?: string | null;
    /**
     * Primary color used on the login page
     */
    primaryColor?: string;
    /**
     * Background color used on the login page
     */
    backgroundColor?: string;
    /**
     * Content color used on the login page
     */
    contentColor?: string;
    /**
     * Neutral color used on the login page
     */
    neutralColor?: string;
};

export type Organization = {
    readonly id?: string;
    tenantId: string;
    name: string;
    logo?: string | null;
    /**
     * The client secret key for the organization. When creating a new organization, the client secret will be readable once. After that, the client secret will be encrypted and cannot be retrieved.
     */
    readonly clientSecret?: string;
    /**
     * The new client secret key for the organization to be rotated.
     */
    readonly newClientSecret?: string;
    /**
     * The datetime when the new client secret key has been created.
     */
    readonly newClientSecretDate?: string;
    customDomain?: string | null;
    /**
     * Indicates if email connections are enabled for this organization.
     */
    emailConnectionEnabled?: boolean;
    /**
     * Indicates if passkey connections are enabled for this organization.
     */
    passkeyConnectionEnabled?: boolean;
    overrideParentSettings?: boolean;
    readonly organizationSettingsId?: string;
    readonly created?: string;
    readonly updated?: string;
    settings?: OrganizationSettings;
    whitelistItems?: Array<WhitelistItem>;
    appRegistrations?: Array<NativeAppRegistration>;
    oAuthProviders?: Array<OAuthProvider>;
    themeSettings?: ThemeSettings;
};

export type Role = {
    id?: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
    name: string;
    permissions: Array<{
        id?: 'updateTenant' | 'deleteTenant' | 'createOrganization' | 'updateOrganization' | 'deleteOrganization' | 'manageBilling' | 'createUser' | 'updateUser' | 'deleteUser' | 'viewAllUsers';
        name?: string;
    }>;
};

export type BillingInfo = {
    readonly id: string;
    readonly tenantDataId: string;
    /**
     * The currency for the invoices
     */
    currency: 'EUR' | 'USD' | 'GBP';
    /**
     * Email address to send the invoices to
     */
    invoiceEmailAddress: string;
    /**
     * Billing address line 1 for the invoices
     */
    addressLine: string;
    /**
     * Billing address line 2 for the invoices
     */
    addressLine2?: string | null;
    /**
     * Zip or postal code for the invoices
     */
    zipPostalCode: string;
    /**
     * City for the invoices
     */
    city: string;
    /**
     * Country for the invoices
     */
    country: 'AF' | 'AL' | 'DZ' | 'AS' | 'AD' | 'AO' | 'AI' | 'AQ' | 'AG' | 'AR' | 'AM' | 'AW' | 'AU' | 'AT' | 'AZ' | 'BS' | 'BH' | 'BD' | 'BB' | 'BY' | 'BE' | 'BZ' | 'BJ' | 'BM' | 'BT' | 'BO' | 'BQ' | 'BA' | 'BW' | 'BV' | 'BR' | 'IO' | 'BN' | 'BG' | 'BF' | 'BI' | 'KH' | 'CM' | 'CA' | 'CV' | 'KY' | 'CF' | 'TD' | 'CL' | 'CN' | 'CX' | 'CC' | 'CO' | 'KM' | 'CG' | 'CD' | 'CK' | 'CR' | 'HR' | 'CU' | 'CW' | 'CY' | 'CZ' | 'CI' | 'DK' | 'DJ' | 'DM' | 'DO' | 'EC' | 'EG' | 'SV' | 'GQ' | 'ER' | 'EE' | 'SZ' | 'ET' | 'FK' | 'FO' | 'FJ' | 'FI' | 'FR' | 'GF' | 'PF' | 'TF' | 'GA' | 'GM' | 'GE' | 'DE' | 'GH' | 'GI' | 'GR' | 'GL' | 'GD' | 'GP' | 'GU' | 'GT' | 'GG' | 'GN' | 'GW' | 'GY' | 'HT' | 'HM' | 'VA' | 'HN' | 'HK' | 'HU' | 'IS' | 'IN' | 'ID' | 'IR' | 'IQ' | 'IE' | 'IM' | 'IT' | 'JM' | 'JP' | 'JE' | 'JO' | 'KZ' | 'KE' | 'KI' | 'KP' | 'KR' | 'KW' | 'KG' | 'LA' | 'LV' | 'LB' | 'LS' | 'LR' | 'LY' | 'LI' | 'LT' | 'LU' | 'MO' | 'MK' | 'MG' | 'MW' | 'MY' | 'MV' | 'ML' | 'MT' | 'MH' | 'MQ' | 'MR' | 'MU' | 'YT' | 'MX' | 'FM' | 'MD' | 'MC' | 'MN' | 'ME' | 'MS' | 'MA' | 'MZ' | 'MM' | 'NA' | 'NR' | 'NP' | 'NL' | 'NC' | 'NZ' | 'NI' | 'NE' | 'NG' | 'NU' | 'NF' | 'MP' | 'NO' | 'OM' | 'PK' | 'PW' | 'PS' | 'PA' | 'PG' | 'PY' | 'PE' | 'PH' | 'PN' | 'PL' | 'PT' | 'PR' | 'QA' | 'RO' | 'RW' | 'RE' | 'BL' | 'SH' | 'KN' | 'LC' | 'MF' | 'PM' | 'VC' | 'WS' | 'SM' | 'ST' | 'SA' | 'SN' | 'RS' | 'SC' | 'SL' | 'SG' | 'SX' | 'SK' | 'SI' | 'SB' | 'SO' | 'ZA' | 'GS' | 'SS' | 'ES' | 'LK' | 'SD' | 'SR' | 'SJ' | 'SE' | 'CH' | 'SY' | 'TW' | 'TJ' | 'TZ' | 'TH' | 'TL' | 'TG' | 'TK' | 'TO' | 'TT' | 'TN' | 'TR' | 'TM' | 'TC' | 'TV' | 'UG' | 'UA' | 'AE' | 'GB' | 'US' | 'UM' | 'UY' | 'UZ' | 'VU' | 'VE' | 'VN' | 'VG' | 'VI' | 'WF' | 'EH' | 'YE' | 'ZM' | 'ZW' | 'AX';
    /**
     * VAT number for the invoices
     */
    vatNumber: string;
};

export type TenantData = {
    readonly id?: string;
    /**
     * Indicates if the tenant is active or not
     */
    readonly active: boolean;
    /**
     * The tier of the tenant, used for billing and feature access
     */
    tier: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * The tier to be set at the start of the next billing period
     */
    nextTier?: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * Custom subscription discount percentage for the tenant
     */
    readonly discountPercentage: number;
    /**
     * ID of the customer in Mollie
     */
    readonly customerId?: string | null;
    /**
     * ID of the customer relation in e-Boekhouden
     */
    readonly relationId?: number | null;
    /**
     * ID of the mandate in Mollie
     */
    readonly mandateId?: string | null;
    /**
     * The start date of the subscription for the tenant
     */
    readonly subscriptionStart?: string | null;
    readonly tenantId?: string;
    billingInfo: BillingInfo;
};

export type Tenant = {
    readonly id?: string;
    readonly tenantId?: string;
    name: string;
    logo?: string | null;
    /**
     * Indicates if the tenant is whitelabeled or not
     */
    whitelabel: boolean;
    readonly organizationSettingsId?: string;
    readonly created?: string;
    readonly updated?: string;
    readonly deleted?: string | null;
    readonly internalUsers?: Array<InternalUser & {
        user: {
            readonly id?: string;
            /**
             * An email address unique for this user.
             */
            email: string;
            /**
             * The Gravatar image URL.
             */
            readonly gravatar?: string;
            /**
             * Flag whether this user has verified their email address.
             */
            verified?: boolean;
            /**
             * Flag whether this user is blocked.
             */
            blocked?: boolean;
            organizationId: string;
            /**
             * The date and time when this user was created.
             */
            readonly created?: string;
            /**
             * The date and time when this user was last updated.
             */
            readonly updated?: string;
            /**
             * The date and time when this user last logged in.
             */
            readonly lastLogin?: string | null;
        };
    } & {
        role: Role;
    }>;
    readonly invitedUsers?: Array<InvitedUser>;
    settings?: OrganizationSettings;
    tenantData: TenantData;
};

export type Invoice = {
    readonly id: string;
    readonly tenantDataId: string;
    /**
     * ID of the payment in Mollie
     */
    readonly paymentId?: string | null;
    /**
     * External ID of the invoice
     */
    readonly invoiceId?: number | null;
    /**
     * The tier of the tenant for this invoice
     */
    tier: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * The currency of the invoice
     */
    currency: 'EUR' | 'USD' | 'GBP';
    /**
     * Amount of the subscription in the invoice
     */
    readonly subscriptionAmount: number;
    /**
     * Number of MAUs for the period of this invoice
     */
    readonly monthlyActiveUsers: number;
    /**
     * Amount of the MAU in the invoice
     */
    readonly monthlyActiveUserAmount: number;
    /**
     * The tier used for calculating the amount of the MAU
     */
    monthlyActiveUserTier: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * Discount percentage for the invoice
     */
    readonly discountPercentage: number;
    /**
     * Status of the payment
     */
    status: 'open' | 'pending' | 'authorized' | 'paid' | 'canceled' | 'failed' | 'expired' | 'chargeback';
    readonly startDate: string;
    readonly endDate: string;
    /**
     * URL to download the invoice PDF
     */
    readonly downloadUrl?: string | null;
    readonly created: string;
    readonly updated: string;
};

export type User = {
    readonly id?: string;
    /**
     * An email address unique for this user.
     */
    email: string;
    /**
     * The Gravatar image URL.
     */
    readonly gravatar?: string;
    /**
     * Flag whether this user has verified their email address.
     */
    verified?: boolean;
    /**
     * Flag whether this user is blocked.
     */
    blocked?: boolean;
    organizationId: string;
    /**
     * The date and time when this user was created.
     */
    readonly created?: string;
    /**
     * The date and time when this user was last updated.
     */
    readonly updated?: string;
    /**
     * The date and time when this user last logged in.
     */
    readonly lastLogin?: string | null;
    readonly connections?: Array<{
        id?: string;
        type?: 'email' | 'passkey' | 'google' | 'apple' | 'microsoft' | 'github';
        userId?: string;
        readonly created?: string;
        readonly updated?: string;
    }>;
};

export type Paging = {
    pager: {
        /**
         * Current page index in the pager, starting at 0
         */
        pageIndex?: number;
        /**
         * Total number of pages based on the limit per page
         */
        readonly pages: number;
        /**
         * Maximum number of entities on one page
         */
        limitPerPage?: number;
        /**
         * Total number of entities
         */
        readonly totalEntities: number;
    };
    /**
     * Generic for the array of entities for one page of the pager
     */
    readonly data?: unknown;
};

export type ApiKey = {
    readonly id?: string;
    /**
     * Foreign key to a tenant or an organization.
     */
    organizationId: string;
    /**
     * The human-readable name of the API key.
     */
    name: string;
    /**
     * The hashed API key. When creating a new API key, it will be readable once. After that, the API key will be encrypted and cannot be retrieved.
     */
    readonly key?: string;
    readonly created?: string;
    readonly updated?: string;
    readonly lastUsed?: string;
};

export type ApiRequest = {
    id: string;
    /**
     * The tenant ID this API request belongs to.
     */
    tenantId: string;
    /**
     * The API endpoint being requested.
     */
    endpoint: string;
    /**
     * The date and time when this API request was made.
     */
    readonly date: string;
};

export type AuditLog = {
    id: string;
    /**
     * The tenant ID this audit log belongs to.
     */
    tenantId: string;
    /**
     * The type of actor that performed the action.
     */
    actorType: 'user' | 'apiKey' | 'authToken' | 'system';
    /**
     * The ID of the actor that performed the action.
     */
    actorId?: string | null;
    /**
     * The action performed on the target.
     */
    action: 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
    /**
     * The type of the target model.
     */
    targetType: string;
    /**
     * The ID of the target model.
     */
    targetId: string;
    /**
     * The status of the action.
     */
    status: 'success' | 'failure';
    /**
     * The IP address of the actor.
     */
    ipAddress: string;
    /**
     * Additional details about the action, including query data and errors.
     */
    details?: {
        [key: string]: unknown;
    };
    /**
     * The date and time when this audit log was created.
     */
    readonly created: string;
};

export type TenantWritable = {
    formId: string;
    name: string;
    logo?: string | null;
    /**
     * Indicates if the tenant is whitelabeled or not
     */
    whitelabel: boolean;
    settings?: OrganizationSettings;
    tenantData: TenantData;
};

export type DeleteApiV1InvitedUserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/invited_user/{id}';
};

export type DeleteApiV1InvitedUserByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1InvitedUserByIdError = DeleteApiV1InvitedUserByIdErrors[keyof DeleteApiV1InvitedUserByIdErrors];

export type DeleteApiV1InvitedUserByIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PostApiV1InvitedUserData = {
    body?: {
        tenantId: string;
        email: string;
        roleId: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
    };
    path?: never;
    query?: never;
    url: '/api/v1/invited_user';
};

export type PostApiV1InvitedUserErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1InvitedUserError = PostApiV1InvitedUserErrors[keyof PostApiV1InvitedUserErrors];

export type PostApiV1InvitedUserResponses = {
    /**
     * An invited admin object
     */
    200: InvitedUser;
};

export type PostApiV1InvitedUserResponse = PostApiV1InvitedUserResponses[keyof PostApiV1InvitedUserResponses];

export type DeleteApiV1InternalUserByTenantIdByUserIdData = {
    body?: never;
    path: {
        tenantId: string;
        userId: string;
    };
    query?: never;
    url: '/api/v1/internal_user/{tenantId}/{userId}';
};

export type DeleteApiV1InternalUserByTenantIdByUserIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1InternalUserByTenantIdByUserIdError = DeleteApiV1InternalUserByTenantIdByUserIdErrors[keyof DeleteApiV1InternalUserByTenantIdByUserIdErrors];

export type DeleteApiV1InternalUserByTenantIdByUserIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PostApiV1InternalUserByTenantIdByUserIdData = {
    body?: {
        roleId?: 'Admin' | 'OrganizationAdmin' | 'FinancialAdmin' | 'UserAdmin';
    };
    path: {
        tenantId: string;
        userId: string;
    };
    query?: never;
    url: '/api/v1/internal_user/{tenantId}/{userId}';
};

export type PostApiV1InternalUserByTenantIdByUserIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1InternalUserByTenantIdByUserIdError = PostApiV1InternalUserByTenantIdByUserIdErrors[keyof PostApiV1InternalUserByTenantIdByUserIdErrors];

export type PostApiV1InternalUserByTenantIdByUserIdResponses = {
    /**
     * An internal user object
     */
    200: InternalUser;
};

export type PostApiV1InternalUserByTenantIdByUserIdResponse = PostApiV1InternalUserByTenantIdByUserIdResponses[keyof PostApiV1InternalUserByTenantIdByUserIdResponses];

export type DeleteApiV1OrganizationByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type DeleteApiV1OrganizationByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1OrganizationByIdError = DeleteApiV1OrganizationByIdErrors[keyof DeleteApiV1OrganizationByIdErrors];

export type DeleteApiV1OrganizationByIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiV1OrganizationByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type GetApiV1OrganizationByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1OrganizationByIdError = GetApiV1OrganizationByIdErrors[keyof GetApiV1OrganizationByIdErrors];

export type GetApiV1OrganizationByIdResponses = {
    /**
     * An organization object with whitelist items, OAuth providers and settings
     */
    200: Organization;
};

export type GetApiV1OrganizationByIdResponse = GetApiV1OrganizationByIdResponses[keyof GetApiV1OrganizationByIdResponses];

export type PostApiV1OrganizationByIdData = {
    body?: {
        name?: string;
        logo?: string | null;
        customDomain?: string | null;
        /**
         * Indicates if email connections are enabled for this organization.
         */
        emailConnectionEnabled?: boolean;
        /**
         * Indicates if passkey connections are enabled for this organization.
         */
        passkeyConnectionEnabled?: boolean;
        overrideParentSettings?: boolean;
        settings?: {
            maxSessionTime?: number;
            maxInactivityTime?: number;
            allowLocalhost?: boolean;
            checkReferrer?: boolean;
            hijackProtection?: boolean;
            hijackProtectionIp?: boolean;
            hijackProtectionUserAgent?: boolean;
            hijackProtectionDeviceId?: boolean;
            autoLogin?: boolean;
            defaultLoginMethod?: 'local' | 'remote' | 'userPick';
            defaultLoginAttemptType?: 'link' | 'challenge' | 'code';
            useGlobalSmtp?: boolean;
            smtpHost?: string | null;
            smtpPort?: number | null;
            smtpFrom?: string | null;
            smtpUser?: string | null;
            smtpPass?: string | null;
        };
        whitelistItems?: Array<{
            value: string;
        }>;
        appRegistrations?: Array<{
            /**
             * Bundle ID or package name for the native app.
             */
            bundleId: string;
            /**
             * App link or universal link to open the app after authentication.
             */
            appLink: string;
        }>;
        themeSettings?: {
            /**
             * Layout of the login block on the login page
             */
            loginBlockLayout?: 'default' | 'compact';
            /**
             * Layout of the login page
             */
            loginPageLayout?: 'default' | 'alignLeft' | 'alignRight' | 'fullLeft' | 'fullRight' | 'compact';
            /**
             * URL of the image to use on the login page
             */
            imageUrl?: string | null;
            /**
             * Google Font name to use on the login page
             */
            customFont?: string | null;
            /**
             * Primary color used on the login page
             */
            primaryColor?: string;
            /**
             * Background color used on the login page
             */
            backgroundColor?: string;
            /**
             * Content color used on the login page
             */
            contentColor?: string;
            /**
             * Neutral color used on the login page
             */
            neutralColor?: string;
        };
        oAuthProviders?: Array<{
            type?: 'google' | 'apple' | 'microsoft' | 'github';
            useOwnCredentials?: boolean;
            clientId?: string | null;
            clientSecret?: string | null;
        }>;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}';
};

export type PostApiV1OrganizationByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1OrganizationByIdError = PostApiV1OrganizationByIdErrors[keyof PostApiV1OrganizationByIdErrors];

export type PostApiV1OrganizationByIdResponses = {
    /**
     * An organization object with whitelist items, OAuth providers and settings
     */
    200: Organization;
};

export type PostApiV1OrganizationByIdResponse = PostApiV1OrganizationByIdResponses[keyof PostApiV1OrganizationByIdResponses];

export type PostApiV1OrganizationData = {
    body?: {
        tenantId: string;
        name: string;
        logo?: string | null;
        customDomain?: string | null;
        /**
         * Indicates if email connections are enabled for this organization.
         */
        emailConnectionEnabled?: boolean;
        /**
         * Indicates if passkey connections are enabled for this organization.
         */
        passkeyConnectionEnabled?: boolean;
        overrideParentSettings?: boolean;
        settings?: {
            maxSessionTime?: number;
            maxInactivityTime?: number;
            allowLocalhost?: boolean;
            checkReferrer?: boolean;
            hijackProtection?: boolean;
            hijackProtectionIp?: boolean;
            hijackProtectionUserAgent?: boolean;
            hijackProtectionDeviceId?: boolean;
            autoLogin?: boolean;
            defaultLoginMethod?: 'local' | 'remote' | 'userPick';
            defaultLoginAttemptType?: 'link' | 'challenge' | 'code';
            useGlobalSmtp?: boolean;
            smtpHost?: string | null;
            smtpPort?: number | null;
            smtpFrom?: string | null;
            smtpUser?: string | null;
            smtpPass?: string | null;
        };
        whitelistItems?: Array<{
            value: string;
        }>;
        appRegistrations?: Array<{
            /**
             * Bundle ID or package name for the native app.
             */
            bundleId: string;
            /**
             * App link or universal link to open the app after authentication.
             */
            appLink: string;
        }>;
        oAuthProviders?: Array<{
            type: 'google' | 'apple' | 'microsoft' | 'github';
            useOwnCredentials?: boolean;
            clientId: string | null;
            clientSecret: string | null;
        }>;
        themeSettings?: {
            /**
             * Layout of the login block on the login page
             */
            loginBlockLayout?: 'default' | 'compact';
            /**
             * Layout of the login page
             */
            loginPageLayout?: 'default' | 'alignLeft' | 'alignRight' | 'fullLeft' | 'fullRight' | 'compact';
            /**
             * URL of the image to use on the login page
             */
            imageUrl?: string | null;
            /**
             * Google Font name to use on the login page
             */
            customFont?: string | null;
            /**
             * Primary color used on the login page
             */
            primaryColor?: string;
            /**
             * Background color used on the login page
             */
            backgroundColor?: string;
            /**
             * Content color used on the login page
             */
            contentColor?: string;
            /**
             * Neutral color used on the login page
             */
            neutralColor?: string;
        };
    };
    path?: never;
    query?: never;
    url: '/api/v1/organization';
};

export type PostApiV1OrganizationErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1OrganizationError = PostApiV1OrganizationErrors[keyof PostApiV1OrganizationErrors];

export type PostApiV1OrganizationResponses = {
    /**
     * An organization object with whitelist items, OAuth providers and settings
     */
    200: Organization;
};

export type PostApiV1OrganizationResponse = PostApiV1OrganizationResponses[keyof PostApiV1OrganizationResponses];

export type GetApiV1OrganizationByIdRotateSecretData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}/rotate_secret';
};

export type GetApiV1OrganizationByIdRotateSecretErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1OrganizationByIdRotateSecretError = GetApiV1OrganizationByIdRotateSecretErrors[keyof GetApiV1OrganizationByIdRotateSecretErrors];

export type GetApiV1OrganizationByIdRotateSecretResponses = {
    /**
     * A new client secret for the organization. The client secret will be encrypted and cannot be retrieved after this request.
     */
    200: string;
};

export type GetApiV1OrganizationByIdRotateSecretResponse = GetApiV1OrganizationByIdRotateSecretResponses[keyof GetApiV1OrganizationByIdRotateSecretResponses];

export type PostApiV1OrganizationByIdActivateSecretData = {
    body?: string;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/organization/{id}/activate_secret';
};

export type PostApiV1OrganizationByIdActivateSecretErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1OrganizationByIdActivateSecretError = PostApiV1OrganizationByIdActivateSecretErrors[keyof PostApiV1OrganizationByIdActivateSecretErrors];

export type PostApiV1OrganizationByIdActivateSecretResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type DeleteApiV1TenantByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/tenant/{id}';
};

export type DeleteApiV1TenantByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1TenantByIdError = DeleteApiV1TenantByIdErrors[keyof DeleteApiV1TenantByIdErrors];

export type DeleteApiV1TenantByIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiV1TenantByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/tenant/{id}';
};

export type GetApiV1TenantByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1TenantByIdError = GetApiV1TenantByIdErrors[keyof GetApiV1TenantByIdErrors];

export type GetApiV1TenantByIdResponses = {
    /**
     * A tenant object with settings, internal and invited users.
     */
    200: Tenant;
};

export type GetApiV1TenantByIdResponse = GetApiV1TenantByIdResponses[keyof GetApiV1TenantByIdResponses];

export type PostApiV1TenantByIdData = {
    body?: {
        name?: string;
        logo?: string | null;
        /**
         * Indicates if the tenant is whitelabeled or not
         */
        whitelabel?: boolean;
        settings?: OrganizationSettings;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/tenant/{id}';
};

export type PostApiV1TenantByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1TenantByIdError = PostApiV1TenantByIdErrors[keyof PostApiV1TenantByIdErrors];

export type PostApiV1TenantByIdResponses = {
    /**
     * A tenant object with settings, internal and invited users.
     */
    200: Tenant;
};

export type PostApiV1TenantByIdResponse = PostApiV1TenantByIdResponses[keyof PostApiV1TenantByIdResponses];

export type GetApiV1InvoicesByTenantIdData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: never;
    url: '/api/v1/invoices/{tenantId}';
};

export type GetApiV1InvoicesByTenantIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1InvoicesByTenantIdError = GetApiV1InvoicesByTenantIdErrors[keyof GetApiV1InvoicesByTenantIdErrors];

export type GetApiV1InvoicesByTenantIdResponses = {
    /**
     * All invoices for this tenant
     */
    200: Array<Invoice>;
};

export type GetApiV1InvoicesByTenantIdResponse = GetApiV1InvoicesByTenantIdResponses[keyof GetApiV1InvoicesByTenantIdResponses];

export type DeleteApiV1UserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user/{id}';
};

export type DeleteApiV1UserByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1UserByIdError = DeleteApiV1UserByIdErrors[keyof DeleteApiV1UserByIdErrors];

export type DeleteApiV1UserByIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiV1UserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user/{id}';
};

export type GetApiV1UserByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1UserByIdError = GetApiV1UserByIdErrors[keyof GetApiV1UserByIdErrors];

export type GetApiV1UserByIdResponses = {
    /**
     * A user object with all active connections
     */
    200: User;
};

export type GetApiV1UserByIdResponse = GetApiV1UserByIdResponses[keyof GetApiV1UserByIdResponses];

export type PostApiV1UserByIdData = {
    body?: {
        /**
         * Flag whether this user has verified their email address.
         */
        verified?: boolean;
        /**
         * Flag whether this user is blocked.
         */
        blocked?: boolean;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/user/{id}';
};

export type PostApiV1UserByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1UserByIdError = PostApiV1UserByIdErrors[keyof PostApiV1UserByIdErrors];

export type PostApiV1UserByIdResponses = {
    /**
     * A user object with all active connections
     */
    200: User;
};

export type PostApiV1UserByIdResponse = PostApiV1UserByIdResponses[keyof PostApiV1UserByIdResponses];

export type DeleteApiV1UserByOrganizationIdByEmailData = {
    body?: never;
    path: {
        organizationId: string;
        email: string;
    };
    query?: never;
    url: '/api/v1/user/{organizationId}/{email}';
};

export type DeleteApiV1UserByOrganizationIdByEmailErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1UserByOrganizationIdByEmailError = DeleteApiV1UserByOrganizationIdByEmailErrors[keyof DeleteApiV1UserByOrganizationIdByEmailErrors];

export type DeleteApiV1UserByOrganizationIdByEmailResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiV1UserByOrganizationIdByEmailData = {
    body?: never;
    path: {
        organizationId: string;
        email: string;
    };
    query?: never;
    url: '/api/v1/user/{organizationId}/{email}';
};

export type GetApiV1UserByOrganizationIdByEmailErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1UserByOrganizationIdByEmailError = GetApiV1UserByOrganizationIdByEmailErrors[keyof GetApiV1UserByOrganizationIdByEmailErrors];

export type GetApiV1UserByOrganizationIdByEmailResponses = {
    /**
     * A user object with all active connections
     */
    200: User;
};

export type GetApiV1UserByOrganizationIdByEmailResponse = GetApiV1UserByOrganizationIdByEmailResponses[keyof GetApiV1UserByOrganizationIdByEmailResponses];

export type PostApiV1UserByOrganizationIdByEmailData = {
    body?: {
        /**
         * Flag whether this user has verified their email address.
         */
        verified?: boolean;
        /**
         * Flag whether this user is blocked.
         */
        blocked?: boolean;
    };
    path: {
        organizationId: string;
        email: string;
    };
    query?: never;
    url: '/api/v1/user/{organizationId}/{email}';
};

export type PostApiV1UserByOrganizationIdByEmailErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1UserByOrganizationIdByEmailError = PostApiV1UserByOrganizationIdByEmailErrors[keyof PostApiV1UserByOrganizationIdByEmailErrors];

export type PostApiV1UserByOrganizationIdByEmailResponses = {
    /**
     * A user object with all active connections
     */
    200: User;
};

export type PostApiV1UserByOrganizationIdByEmailResponse = PostApiV1UserByOrganizationIdByEmailResponses[keyof PostApiV1UserByOrganizationIdByEmailResponses];

export type PostApiV1UserData = {
    body?: {
        /**
         * An email address unique for this user.
         */
        email: string;
        /**
         * Flag whether this user has verified their email address.
         */
        verified?: boolean;
        /**
         * Flag whether this user is blocked.
         */
        blocked?: boolean;
        organizationId: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user';
};

export type PostApiV1UserErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1UserError = PostApiV1UserErrors[keyof PostApiV1UserErrors];

export type PostApiV1UserResponses = {
    /**
     * A user object with all active connections
     */
    200: User;
};

export type PostApiV1UserResponse = PostApiV1UserResponses[keyof PostApiV1UserResponses];

export type GetApiV1UsersByOrganizationIdData = {
    body?: never;
    path: {
        organizationId: string;
    };
    query?: {
        /**
         * Current page index in the pager, starting at 0
         */
        pageIndex?: number;
        /**
         * Maximum number of entities on one page
         */
        limitPerPage?: number;
        order?: 'verified' | 'blocked' | 'created' | 'updated' | 'lastLogin';
        sort?: 'asc' | 'desc';
        search?: string;
    };
    url: '/api/v1/users/{organizationId}';
};

export type GetApiV1UsersByOrganizationIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1UsersByOrganizationIdError = GetApiV1UsersByOrganizationIdErrors[keyof GetApiV1UsersByOrganizationIdErrors];

export type GetApiV1UsersByOrganizationIdResponses = {
    /**
     * A pager object with users
     */
    200: Paging & {
        data: Array<User>;
    };
};

export type GetApiV1UsersByOrganizationIdResponse = GetApiV1UsersByOrganizationIdResponses[keyof GetApiV1UsersByOrganizationIdResponses];

export type DeleteApiV1ApiKeyByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/api_key/{id}';
};

export type DeleteApiV1ApiKeyByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type DeleteApiV1ApiKeyByIdError = DeleteApiV1ApiKeyByIdErrors[keyof DeleteApiV1ApiKeyByIdErrors];

export type DeleteApiV1ApiKeyByIdResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetApiV1ApiKeyByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/api_key/{id}';
};

export type GetApiV1ApiKeyByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1ApiKeyByIdError = GetApiV1ApiKeyByIdErrors[keyof GetApiV1ApiKeyByIdErrors];

export type GetApiV1ApiKeyByIdResponses = {
    /**
     * An API key object
     */
    200: ApiKey;
};

export type GetApiV1ApiKeyByIdResponse = GetApiV1ApiKeyByIdResponses[keyof GetApiV1ApiKeyByIdResponses];

export type PostApiV1ApiKeyByIdData = {
    body?: {
        /**
         * The human-readable name of the API key.
         */
        name?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/api_key/{id}';
};

export type PostApiV1ApiKeyByIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1ApiKeyByIdError = PostApiV1ApiKeyByIdErrors[keyof PostApiV1ApiKeyByIdErrors];

export type PostApiV1ApiKeyByIdResponses = {
    /**
     * An API key object
     */
    200: ApiKey;
};

export type PostApiV1ApiKeyByIdResponse = PostApiV1ApiKeyByIdResponses[keyof PostApiV1ApiKeyByIdResponses];

export type PostApiV1ApiKeyData = {
    body?: {
        /**
         * Foreign key to a tenant or an organization.
         */
        organizationId: string;
        /**
         * The human-readable name of the API key.
         */
        name: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/api_key';
};

export type PostApiV1ApiKeyErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type PostApiV1ApiKeyError = PostApiV1ApiKeyErrors[keyof PostApiV1ApiKeyErrors];

export type PostApiV1ApiKeyResponses = {
    /**
     * An API key object
     */
    200: ApiKey;
};

export type PostApiV1ApiKeyResponse = PostApiV1ApiKeyResponses[keyof PostApiV1ApiKeyResponses];

export type GetApiV1ApiKeysByOrganizationIdData = {
    body?: never;
    path: {
        /**
         * Tenant or organization ID
         */
        organizationId: string;
    };
    query?: never;
    url: '/api/v1/api_keys/{organizationId}';
};

export type GetApiV1ApiKeysByOrganizationIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1ApiKeysByOrganizationIdError = GetApiV1ApiKeysByOrganizationIdErrors[keyof GetApiV1ApiKeysByOrganizationIdErrors];

export type GetApiV1ApiKeysByOrganizationIdResponses = {
    /**
     * An array with API key objects
     */
    200: Array<ApiKey>;
};

export type GetApiV1ApiKeysByOrganizationIdResponse = GetApiV1ApiKeysByOrganizationIdResponses[keyof GetApiV1ApiKeysByOrganizationIdResponses];

export type GetApiV1ApiRequestsByTenantIdData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: {
        /**
         * Start date for filtering requests (ISO format).
         */
        from?: string;
    };
    url: '/api/v1/api_requests/{tenantId}';
};

export type GetApiV1ApiRequestsByTenantIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1ApiRequestsByTenantIdError = GetApiV1ApiRequestsByTenantIdErrors[keyof GetApiV1ApiRequestsByTenantIdErrors];

export type GetApiV1ApiRequestsByTenantIdResponses = {
    /**
     * A list of API requests
     */
    200: Array<ApiRequest>;
};

export type GetApiV1ApiRequestsByTenantIdResponse = GetApiV1ApiRequestsByTenantIdResponses[keyof GetApiV1ApiRequestsByTenantIdResponses];

export type GetApiV1AuditLogsByTenantIdData = {
    body?: never;
    path: {
        tenantId: string;
    };
    query?: {
        /**
         * Current page index in the pager, starting at 0
         */
        pageIndex?: number;
        /**
         * Maximum number of entities on one page
         */
        limitPerPage?: number;
        actorType?: 'user' | 'apiKey' | 'authToken' | 'system';
        actorId?: string;
        action?: 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
        targetType?: string;
        targetId?: string;
        status?: 'success' | 'failure';
        ipAddress?: string;
    };
    url: '/api/v1/audit_logs/{tenantId}';
};

export type GetApiV1AuditLogsByTenantIdErrors = {
    /**
     * Bad request
     */
    400: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * No permission
     */
    403: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Not found
     */
    404: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Invalid method
     */
    405: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Too many requests
     */
    429: {
        errorCode?: 'genericError' | 'noPermission' | 'tooManyRequests' | 'missingFields' | 'sessionMissing' | 'sessionNotVerified' | 'sessionExpired' | 'sessionInactive' | 'sessionInvalid' | 'domainInvalid' | 'loginAttemptMissing' | 'loginAttemptExpired' | 'loginAttemptInvalid' | 'passkeyDataMissing' | 'passkeyDataExpired' | 'passkeyDataInvalid' | 'passkeyWrongOrganization' | 'callbackUrlInvalid' | 'connectionMissing' | 'organizationIdMissing' | 'callbackUrlMissing' | 'tokenMissing' | 'tokenInvalid' | 'stateMissing' | 'stateInvalid' | 'codeChallengeMissing' | 'codeChallengeInvalid' | 'captchaInvalid' | 'entityMissing' | 'entityInvalid';
        message?: string;
    };
    /**
     * Deployment error
     */
    502: unknown;
    /**
     * Service unavailable
     */
    503: unknown;
    /**
     * Gateway timeout
     */
    504: unknown;
};

export type GetApiV1AuditLogsByTenantIdError = GetApiV1AuditLogsByTenantIdErrors[keyof GetApiV1AuditLogsByTenantIdErrors];

export type GetApiV1AuditLogsByTenantIdResponses = {
    /**
     * A pager object with audit logs
     */
    200: Paging & {
        data: Array<AuditLog>;
    };
};

export type GetApiV1AuditLogsByTenantIdResponse = GetApiV1AuditLogsByTenantIdResponses[keyof GetApiV1AuditLogsByTenantIdResponses];

export type ClientOptions = {
    baseUrl: 'https://centralauth.com' | (string & {});
};
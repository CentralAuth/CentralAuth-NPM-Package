// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteApiV1InvitedUserByIdData, DeleteApiV1InvitedUserByIdError, PostApiV1InvitedUserData, PostApiV1InvitedUserResponse, PostApiV1InvitedUserError, DeleteApiV1InternalUserByTenantIdByUserIdData, DeleteApiV1InternalUserByTenantIdByUserIdError, PostApiV1InternalUserByTenantIdByUserIdData, PostApiV1InternalUserByTenantIdByUserIdResponse, PostApiV1InternalUserByTenantIdByUserIdError, DeleteApiV1OrganizationByIdData, DeleteApiV1OrganizationByIdError, GetApiV1OrganizationByIdData, GetApiV1OrganizationByIdResponse, GetApiV1OrganizationByIdError, PostApiV1OrganizationByIdData, PostApiV1OrganizationByIdResponse, PostApiV1OrganizationByIdError, PostApiV1OrganizationData, PostApiV1OrganizationResponse, PostApiV1OrganizationError, GetApiV1OrganizationByIdRotateSecretData, GetApiV1OrganizationByIdRotateSecretResponse, GetApiV1OrganizationByIdRotateSecretError, PostApiV1OrganizationByIdActivateSecretData, PostApiV1OrganizationByIdActivateSecretError, DeleteApiV1TenantByIdData, DeleteApiV1TenantByIdError, GetApiV1TenantByIdData, GetApiV1TenantByIdResponse, GetApiV1TenantByIdError, PostApiV1TenantByIdData, PostApiV1TenantByIdResponse, PostApiV1TenantByIdError, DeleteApiV1UserByIdData, DeleteApiV1UserByIdError, GetApiV1UserByIdData, GetApiV1UserByIdResponse, GetApiV1UserByIdError, PostApiV1UserByIdData, PostApiV1UserByIdResponse, PostApiV1UserByIdError, DeleteApiV1UserByOrganizationIdByEmailData, DeleteApiV1UserByOrganizationIdByEmailError, GetApiV1UserByOrganizationIdByEmailData, GetApiV1UserByOrganizationIdByEmailResponse, GetApiV1UserByOrganizationIdByEmailError, PostApiV1UserByOrganizationIdByEmailData, PostApiV1UserByOrganizationIdByEmailResponse, PostApiV1UserByOrganizationIdByEmailError, PostApiV1UserData, PostApiV1UserResponse, PostApiV1UserError, GetApiV1UsersByOrganizationIdData, GetApiV1UsersByOrganizationIdResponse, GetApiV1UsersByOrganizationIdError, DeleteApiV1ApiKeyByIdData, DeleteApiV1ApiKeyByIdError, GetApiV1ApiKeyByIdData, GetApiV1ApiKeyByIdResponse, GetApiV1ApiKeyByIdError, PostApiV1ApiKeyByIdData, PostApiV1ApiKeyByIdResponse, PostApiV1ApiKeyByIdError, PostApiV1ApiKeyData, PostApiV1ApiKeyResponse, PostApiV1ApiKeyError, GetApiV1ApiKeysByOrganizationIdData, GetApiV1ApiKeysByOrganizationIdResponse, GetApiV1ApiKeysByOrganizationIdError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Delete an invited admin
 */
export const deleteApiV1InvitedUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1InvitedUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1InvitedUserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invited_user/{id}',
        ...options
    });
};

/**
 * Invite an new admin to the tenant
 */
export const postApiV1InvitedUser = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1InvitedUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1InvitedUserResponse, PostApiV1InvitedUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/invited_user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an internal user (admin) on a tenant
 */
export const deleteApiV1InternalUserByTenantIdByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1InternalUserByTenantIdByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1InternalUserByTenantIdByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/internal_user/{tenantId}/{userId}',
        ...options
    });
};

/**
 * Update an existing internal user (admin) on a tenant
 */
export const postApiV1InternalUserByTenantIdByUserId = <ThrowOnError extends boolean = false>(options: Options<PostApiV1InternalUserByTenantIdByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1InternalUserByTenantIdByUserIdResponse, PostApiV1InternalUserByTenantIdByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/internal_user/{tenantId}/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an organization
 * WARNING! When you delete an organizations, all users and settings will be deleted. This action cannot be undone.
 */
export const deleteApiV1OrganizationById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1OrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1OrganizationByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options
    });
};

/**
 * Get an organization
 */
export const getApiV1OrganizationById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1OrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1OrganizationByIdResponse, GetApiV1OrganizationByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options
    });
};

/**
 * Update an existing organization
 */
export const postApiV1OrganizationById = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1OrganizationByIdResponse, PostApiV1OrganizationByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new organization
 */
export const postApiV1Organization = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1OrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1OrganizationResponse, PostApiV1OrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Request a new client secret for the organization
 */
export const getApiV1OrganizationByIdRotateSecret = <ThrowOnError extends boolean = false>(options: Options<GetApiV1OrganizationByIdRotateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1OrganizationByIdRotateSecretResponse, GetApiV1OrganizationByIdRotateSecretError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}/rotate_secret',
        ...options
    });
};

/**
 * Activate the newly created client secret for the organization
 * To create a new client secret, first use the /api/v1/organization/{id}/rotate_secret endpoint.
 */
export const postApiV1OrganizationByIdActivateSecret = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OrganizationByIdActivateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostApiV1OrganizationByIdActivateSecretError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organization/{id}/activate_secret',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a tenant
 * WARNING! When you delete a tenant, all organizations, users and settings will be deleted. This action cannot be undone.
 */
export const deleteApiV1TenantById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1TenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1TenantByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tenant/{id}',
        ...options
    });
};

/**
 * Get a tenant
 */
export const getApiV1TenantById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1TenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1TenantByIdResponse, GetApiV1TenantByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tenant/{id}',
        ...options
    });
};

/**
 * Update an existing tenant
 */
export const postApiV1TenantById = <ThrowOnError extends boolean = false>(options: Options<PostApiV1TenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1TenantByIdResponse, PostApiV1TenantByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tenant/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a user
 * Note that a user can create a new user object by logging in again. It is not necessary to create a new user object first.
 */
export const deleteApiV1UserById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1UserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1UserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{id}',
        ...options
    });
};

/**
 * Get a user
 */
export const getApiV1UserById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1UserByIdResponse, GetApiV1UserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{id}',
        ...options
    });
};

/**
 * Update an existing user
 * Note that it is not possible to edit the email address of a user.
 */
export const postApiV1UserById = <ThrowOnError extends boolean = false>(options: Options<PostApiV1UserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1UserByIdResponse, PostApiV1UserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a user by email address
 * Note that a user can create a new user object by logging in again. It is not necessary to create a new user object first.
 */
export const deleteApiV1UserByOrganizationIdByEmail = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1UserByOrganizationIdByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1UserByOrganizationIdByEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{organizationId}/{email}',
        ...options
    });
};

/**
 * Get a user by email address
 */
export const getApiV1UserByOrganizationIdByEmail = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UserByOrganizationIdByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1UserByOrganizationIdByEmailResponse, GetApiV1UserByOrganizationIdByEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{organizationId}/{email}',
        ...options
    });
};

/**
 * Update an existing user by email address
 * Note that it is not possible to edit the email address of a user.
 */
export const postApiV1UserByOrganizationIdByEmail = <ThrowOnError extends boolean = false>(options: Options<PostApiV1UserByOrganizationIdByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1UserByOrganizationIdByEmailResponse, PostApiV1UserByOrganizationIdByEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user/{organizationId}/{email}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new user
 * Note that it is not necessary to create a user before this user can log in. When a user does not exist when they try to log for in the first time, the user will be created automatically.
 */
export const postApiV1User = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1UserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1UserResponse, PostApiV1UserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a list of users
 * Get a pager object with all users in an organization
 */
export const getApiV1UsersByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetApiV1UsersByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1UsersByOrganizationIdResponse, GetApiV1UsersByOrganizationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{organizationId}',
        ...options
    });
};

/**
 * Delete an API key
 */
export const deleteApiV1ApiKeyById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ApiKeyByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiV1ApiKeyByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/api_key/{id}',
        ...options
    });
};

/**
 * Get an API key
 */
export const getApiV1ApiKeyById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1ApiKeyByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1ApiKeyByIdResponse, GetApiV1ApiKeyByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/api_key/{id}',
        ...options
    });
};

/**
 * Update an existing API key
 */
export const postApiV1ApiKeyById = <ThrowOnError extends boolean = false>(options: Options<PostApiV1ApiKeyByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1ApiKeyByIdResponse, PostApiV1ApiKeyByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/api_key/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new API key
 */
export const postApiV1ApiKey = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ApiKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiV1ApiKeyResponse, PostApiV1ApiKeyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/api_key',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all API keys for a tenant or organization
 */
export const getApiV1ApiKeysByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetApiV1ApiKeysByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1ApiKeysByOrganizationIdResponse, GetApiV1ApiKeysByOrganizationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/api_keys/{organizationId}',
        ...options
    });
};